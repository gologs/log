/*
Copyright 2016 James DeFelice

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package io

import (
	"encoding/binary"
	"io"
)

// RecordIO returns a stream that writes log messages to the underlying stream, each
// message prefixed with length bytes generated by binary.PutUvarint.
func RecordIO(delegate io.Writer) Stream {
	var (
		assertWrittenBytes = func(expected, actual int) error {
			if expected > actual {
				return io.ErrShortWrite
			}
			return nil
		}
		sz [binary.MaxVarintLen64]byte
	)
	return &BufferedStream{
		EOMFunc: func(buf Buffer, err error) error {
			if err == nil {
				// encode and write the length bytes
				var (
					buflen = buf.Len()
					n      = binary.PutUvarint(sz[:], uint64(buflen))
					w      int
				)
				w, err = delegate.Write(sz[:n])
				if err == nil {
					err = assertWrittenBytes(n, w)
				}
				if err == nil {
					// write the data bytes
					var written int64
					written, err = buf.WriteTo(delegate)
					w = int(written)
				}
				if err == nil {
					err = assertWrittenBytes(buflen, w)
				}
			}
			return err
		},
	}
}
