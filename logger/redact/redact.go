/*
Copyright 2016 James DeFelice

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package redact

import (
	"strings"

	"github.com/gologs/log/context"
	"github.com/gologs/log/logger"
)

// Interface is implemented by types containing possibly sensitive information
// that should not appear in a log stream.
type Interface interface {
	Redacted() interface{}
}

// Func is a functional adapter for Interface
type Func func() interface{}

// Redacted implements Interface
func (f Func) Redacted() interface{} { return f() }

// Default is the default redacting logger.Decorator
var Default = Decorator()

// Decorator returns a decorator scans log arguments for those that implement Interface
// and, when found, invokes Redacted to obtain a replacement value.
func Decorator() logger.Decorator {
	return logger.Decorator(func(logs logger.Logger) logger.Logger {
		return logger.Func(func(ctx context.Context, m string, args ...interface{}) {
			for i := range args {
				if r, ok := args[i].(Interface); ok {
					args[i] = r.Redacted()
				}
			}
			logs.Logf(ctx, m, args...)
		})
	})
}

// Simple impements Interface
type Simple int

// Label is generated by the Simple redactor
const Label = "xxREDACTEDxx"

// Redacted returns the contents of Label
func (x Simple) Redacted() interface{} { return Label }

// Blackout generates a redactor that replaces each char of the given string with 'x'
func Blackout(s string) Interface {
	return Func(func() interface{} { return strings.Repeat("x", len(s)) })
}
